context B!BibTeXFile {
  constraint ProducesDocBook {
    check : not D!DocBook.all.isEmpty
  }

  constraint ProducesBook {
    check : not D!Book.all.isEmpty
  }

  constraint ProducesArticle {
    check : D!Article.all.exists(a|a.`title` = 'BibTeXML to DocBook')
  }

  constraint ProducesAuthorsList {
    check : getAuthorsList().isDefined()
  }

  constraint ProducesJournalsList {
    check : getJournalsList().isDefined()
  }

  constraint ProducesReferencesList {
    check : getReferencesList().isDefined()
  }

  constraint ProducesTitlesList {
    check : getTitlesList().isDefined()
  }
}

context B!Author {
  constraint GoesToAuthorList {
    guard : getAuthorsList().isDefined()
    check : getAuthorsList().paras.exists(p | p.content.startsWith(self.author))
  }
}

context B!BibTeXEntry {
  constraint GoesToReferenceList {
    guard : getReferencesList().isDefined()
    check : getReferencesList().paras.exists(p | p.content.startsWith('[' + self.id + ']')) 
  }
}

context B!TitledEntry {
  constraint GoesToTitleList {
    guard : getTitlesList().isDefined()
    check : getTitlesList().paras.exists(p | p.content.contains(self.`title`))
  }
}

context B!Article {
  constraint GoesToJournalList {
    guard : getJournalsList().isDefined()
    check : getJournalsList().paras.exists(p | p.content.contains(self.journal))
  }
}

context D!Para {
  constraint AuthorsAreSorted {
    guard : self.eContainer = getAuthorsList() and self.hasMatchingAuthor()
    check : self.followingParagraphIsLarger()
  }

  constraint TitlesAreSorted {
    guard : self.eContainer = getTitlesList() and self.hasMatchingTitle()
    check : self.followingParagraphIsLarger()
  }

  constraint JournalsAreSorted {
    guard : self.eContainer = getJournalsList() and self.hasMatchingTitle()
    check : self.followingParagraphIsLarger()
  }

}

@cached
operation D!Para hasMatchingAuthor(): Boolean {
  return B!Author.all.exists(a|self.content.contains(a.author));
}

@cached
operation D!Para hasMatchingTitle(): Boolean {
  return B!TitledEntry.all.exists(e|self.content.contains(e.`title`));
}

@cached
operation D!Para hasMatchingJournal(): Boolean {
  return B!Article.all.exists(a|self.content.contains(a.journal));
}

@cached
operation getAuthorsList() : D!Sect1 {
  return D!Sect1.all.selectOne(s | s.`title`.startsWith('Authors list'));
}

@cached
operation getReferencesList(): D!Sect1 {
  return D!Sect1.all.selectOne(s | s.`title`.startsWith('References List'));
}

@cached
operation getTitlesList(): D!Sect1 {
  return D!Sect1.all.selectOne(s | s.`title`.startsWith('Titles List'));
}

@cached
operation getJournalsList(): D!Sect1 {
  return D!Sect1.all.selectOne(s | s.`title`.startsWith('Journals List'));
}

operation D!Para followingParagraphIsLarger() {
  var siblingParas = self.eContainer.paras;
  var idx = siblingParas.indexOf(self);
  if (idx + 1 < siblingParas.size) {
    return self.content.compareTo(siblingParas.get(idx + 1).content) <= 0;
  } else {
    return true;
  }
}
