-- @atlcompiler emftvm
-- @path BibTex=/ttc2019-live/metamodels/ttc2019.live.metamodels/models/BibTeX.ecore
-- @path DocBook=/ttc2019-live/metamodels/ttc2019.live.metamodels/models/DocBook.ecore
module BibTeX2DocBook;
create OUT : DocBook from IN : BibTeX;

-------------------------------------------------------------------------------
-- HELPERS --------------------------------------------------------------------
-------------------------------------------------------------------------------

helper context OclAny def : randomUUID() : String =
	"#native"!"java::util::UUID".refInvokeStaticOperation('randomUUID', Sequence{}).toString();

--- This helper builds the set of distinct authors referenced in the input BibTeX
--- model.
helper def: authorSet : Set(BibTeX!Author) = BibTeX!Author.allInstances()
	->mappedBySingle(e | e.author)
	->getValues()
	->asSet();

--- This helper builds the set of distinct authors referenced in the input BibTeX
--- model.
--- Built set is sorted by author name.
helper def: authorOrderedSet : OrderedSet(BibTeX!Author) = thisModule.authorSet
	->sortedBy(e | e.author);

--- This helper builds the set of distinct titles referenced in the input BibTeX
--- model.
helper def: titledEntrySet : Set(BibTeX!TitledEntry) = BibTeX!TitledEntry.allInstances()
	->mappedBySingle(e | e.title)
	->getValues()
	->asSet();

--- This helper builds the set of distinct titles referenced in the input BibTeX
--- model.
--- Built set is sorted by title.
helper def: titledEntryOrderedSet : OrderedSet(BibTeX!TitledEntry) = thisModule.titledEntrySet
	->sortedBy(e | e.title);

--- This helper builds the set of distinct journals referenced in the input BibTeX
--- model.
helper def: articleSet : Set(BibTeX!Article) = BibTeX!Article.allInstances()
	->mappedBySingle(e | e.journal)
	->getValues()
	->asSet();

--- This helper builds the set of distinct journals referenced in the input BibTeX
--- model.
--- Built set is sorted by journal name.
helper def: articleOrderedSet : OrderedSet(BibTeX!Article) = thisModule.articleSet
	->sortedBy(e | e.journal);

--- This helper builds a string containing all information on a given BibTeXEntry.
--- Content of the generated string depends on the entry type.
helper context BibTeX!BibTeXEntry def: buildEntryPara() : String =
	'[' + self.id + ']'
	+ ' ' + self.oclType().name
	+ (if self.oclIsKindOf(BibTeX!TitledEntry) then ' ' + self.title else '' endif)
	+ (if self.oclIsKindOf(BibTeX!AuthoredEntry) 
	   then self.authors->iterate(e; str : String = '' | str + ' ' + e.author)
	   else ''
	   endif)
	+ (if self.oclIsKindOf(BibTeX!DatedEntry) then ' ' + self.year.toString() else '' endif)
	+ (if self.oclIsKindOf(BibTeX!BookTitledEntry) then ' ' + self.booktitle else '' endif)
	+ (if self.oclIsKindOf(BibTeX!ThesisEntry) then ' ' +  self.school else '' endif)
	+ (if self.oclIsKindOf(BibTeX!Article) then ' ' + self.journal else '' endif)
	+ (if self.oclIsKindOf(BibTeX!Unpublished) then ' ' + self.note else '' endif)
	+ (if self.oclIsKindOf(BibTeX!Book) then ' ' + self.publisher else '' endif)
	+ (if self.oclIsKindOf(BibTeX!InBook) then ' ' + self.chapter.toString() else '' endif)
	;

-------------------------------------------------------------------------------
-- RULES ----------------------------------------------------------------------
-------------------------------------------------------------------------------

-- Rule 'Main'
-- This rule generates the structure of the DocBook model from a BibTeXFile element
rule Main {
	from
        bib : BibTeX!BibTeXFile
	to 
		doc : DocBook!DocBook (
			books <- Sequence { boo },
			id <- 'doc'
		),
		boo : DocBook!Book (
			articles <- Sequence { art },
			id <- 'book'
		),
		art : DocBook!Article (
			title <- 'BibTeXML to DocBook',
			sections_1 <- Sequence{se1, se2, se3, se4}
		),
		se1 : DocBook!Sect1 (
			title <- 'References List',
			paras <- BibTeX!BibTeXEntry.allInstances()->sortedBy(e | e.id),
			id <- 'se1'
		),
		se2 : DocBook!Sect1 (
			title <- 'Authors list',
			paras <- thisModule.authorOrderedSet,
			id <- 'se2'
		),
		se3 : DocBook!Sect1 (
			title <- 'Titles List',
			paras <- thisModule.titledEntryOrderedSet->collect(e | thisModule.resolveTemp(e, 'title_para')),
			id <- 'se3'
		),
		se4 : DocBook!Sect1 (
			title <- 'Journals List',
			paras <- thisModule.articleOrderedSet->collect(e | thisModule.resolveTemp(e, 'journal_para')),
			id <- 'se4'
		)
}

-- Rule 'Author'
-- This rule generates a section_2 paragraph for each distinct author.
rule Author {
	from
		a : BibTeX!Author (
			  thisModule.authorSet->includes(a)
			)
	to
		p1 : DocBook!Para (
			content <- a.author,
			id <- a.randomUUID()
		)
}

-- Rule 'UntitledEntry'
-- This rule generates a section_1 paragraph for each untitled entry.
rule UntitledEntry {
	from
		e : BibTeX!BibTeXEntry
	to
		entry_para : DocBook!Para (
			content <- e.buildEntryPara(),
			id <- e.randomUUID()
		)
}

-- Rule 'TitledEntry_Title_NoArticle'
-- [titledEntrySet contains a subset of TitledEntry, so that each title
-- appears only once in the set]
-- For each "no article" titled entry that belongs to titledEntrySet,
-- this rule generates:
--   * a section_1 paragraph;
--   * a section_3 paragraph.

-- @extends UntitledEntry
rule TitledEntry_Title_NoArticle {
	from
		e : BibTeX!TitledEntry (
			thisModule.titledEntrySet->includes(e)
		)
	to
		entry_para : DocBook!Para,
		title_para : DocBook!Para (
			content <- e.title,
			id <- e.randomUUID()
		)
}

-- Rule 'TitledEntry_NoTitle_NoArticle'
-- [titledEntrySet contains a subset of TitledEntry, so that each title
-- appears only once in the set]
-- For each "no article" titled entry that does not belong to titledEntrySet,
-- this rule generates:
--   * a section_1 paragraph;
-- This rule's behaviour is already implemented in UntitledEntry, so it is removed



-- Rule 'Article_NoTitle_Journal'
-- [titledEntrySet contains a subset of TitledEntry, so that each title
-- appears only once in the set]
-- [articleSet contains a subset of Article, so that each journal
-- appears only once in the set]
-- For each article entry that belongs to articleSet, this rule generates:
--   * a section_1 paragraph;
--   * a section_4 paragraph.

-- @extends UntitledEntry
rule Article_NoTitle_Journal {
	from
		e : BibTeX!Article (
			thisModule.articleSet->includes(e)
		)
	to
		entry_para : DocBook!Para,
		journal_para : DocBook!Para (
			content <- e.journal,
			id <- e.randomUUID()
		)
}

-- Rule 'Article_Title_Journal'
-- [titledEntrySet contains a subset of TitledEntry, so that each title
-- appears only once in the set]
-- [articleSet contains a subset of Article, so that each journal
-- appears only once in the set]
-- For each article entry that belongs to articleSet, this rule generates:
--   * a section_1 paragraph;
--   * a section_3 paragraph;
--   * a section_4 paragraph.

-- @extends TitledEntry_Title_NoArticle, Article_NoTitle_Journal
rule Article_Title_Journal {
	from
		e : BibTeX!Article
	to
		entry_para : DocBook!Para,
		title_para : DocBook!Para,
		journal_para : DocBook!Para
}

-- Rule 'Article_Title_NoJournal'
-- [titledEntrySet contains a subset of TitledEntry, so that each title
-- appears only once in the set]
-- [articleSet contains a subset of Article, so that each journal
-- appears only once in the set]
-- For each article entry that belongs to articleSet, this rule generates:
--   * a section_1 paragraph;
--   * a section_3 paragraph.
-- This rule's behaviour is already implemented in TitledEntry_Title_NoArticle, so it is removed



-- Rule 'Article_NoTitle_NoJournal'
-- [titledEntrySet contains a subset of TitledEntry, so that each title
-- appears only once in the set]
-- [articleSet contains a subset of Article, so that each journal
-- appears only once in the set]
-- For each article entry that belongs to articleSet, this rule generates:
--   * a section_1 paragraph;
-- This rule's behaviour is already implemented in UntitledEntry, so it is removed


